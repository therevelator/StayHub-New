import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { format } from 'date-fns';
import { propertyOwnerService } from '../../services/propertyOwnerService';
import { toast } from 'react-hot-toast';
import EditBookingModal from '../../components/Booking/EditBookingModal';
import ViewBookingModal from '../../components/Booking/ViewBookingModal';

const PropertyBookings = () => {
  const { propertyId } = useParams();
  if (!propertyId) return <div className="p-4">No property ID provided</div>;
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [viewingBooking, setViewingBooking] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(20);

  useEffect(() => {
    fetchBookings();
  }, [propertyId]);

  const fetchBookings = async () => {
    try {
      console.log('Fetching bookings for property:', propertyId);
      const response = await propertyOwnerService.getPropertyBookings(propertyId);
      console.log('Fetched bookings:', response.data);
      setBookings(response.data || []);
    } catch (error) {
      console.error('Error fetching bookings:', error);
      toast.error('Failed to fetch bookings');
    } finally {
      setLoading(false);
    }
  };

  const handleEditClick = (booking) => {
    console.log('Editing booking:', booking);
    setSelectedBooking(booking);
    setViewingBooking(null); // Close view modal if open
  };

  const handleViewClick = (booking) => {
    setViewingBooking(booking);
  };

  const handleDeleteClick = async (booking) => {
    if (!window.confirm('Are you sure you want to cancel this booking?')) {
      return;
    }

    try {
      await propertyOwnerService.cancelBooking(booking.id);
      toast.success('Booking cancelled successfully');
      fetchBookings();
    } catch (error) {
      console.error('Error cancelling booking:', error);
      toast.error('Failed to cancel booking');
    }
  };

  const handleCloseModal = () => {
    setSelectedBooking(null);
    setViewingBooking(null);
  };

  const handleBookingUpdated = () => {
    fetchBookings();
  };

  const getStatusBadgeClass = (status) => {
    switch (status?.toLowerCase()) {
      case 'confirmed':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return <div className="p-4">Loading bookings...</div>;
  }

  return (
    <div className="p-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
        <h2 className="text-xl font-semibold">Bookings</h2>
        
        <div className="w-full sm:w-auto flex flex-col sm:flex-row gap-4">
          {/* Rows per page selector */}
          <select
            value={rowsPerPage}
            onChange={(e) => {
              setRowsPerPage(Number(e.target.value));
              setCurrentPage(1); // Reset to first page when changing rows per page
            }}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          >
            <option value={20}>20 per page</option>
            <option value={50}>50 per page</option>
            <option value={100}>100 per page</option>
          </select>

          {/* Search Input */}
          <div className="relative flex-grow sm:max-w-xs">
            <input
              type="text"
              placeholder="Search by name, booking ID, or confirmation number"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            />
            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>

          {/* Filter Buttons */}
          <div className="flex gap-2">
            <button
              onClick={() => setStatusFilter('all')}
              className={`px-4 py-2 rounded-lg ${statusFilter === 'all' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
            >
              All
            </button>
            <button
              onClick={() => setStatusFilter('confirmed')}
              className={`px-4 py-2 rounded-lg ${statusFilter === 'confirmed' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
            >
              Confirmed
            </button>
            <button
              onClick={() => setStatusFilter('cancelled')}
              className={`px-4 py-2 rounded-lg ${statusFilter === 'cancelled' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
            >
              Cancelled
            </button>
          </div>
        </div>
      </div>
      
      <div>
        {/* Filter and display bookings */}
        {(() => {
          let filteredBookings = bookings;

          // Apply status filter
          if (statusFilter !== 'all') {
            filteredBookings = filteredBookings.filter(booking => 
              booking.status.toLowerCase() === statusFilter.toLowerCase()
            );
          }

          // Apply search filter
          if (searchQuery.trim()) {
            const query = searchQuery.toLowerCase().trim();
            filteredBookings = filteredBookings.filter(booking => 
              `${booking.first_name} ${booking.last_name}`.toLowerCase().includes(query) ||
              booking.id.toString().includes(query) ||
              (booking.confirmation_number && booking.confirmation_number.toLowerCase().includes(query))
            );
          }

          // Sort bookings by check-in date (latest first)
          filteredBookings.sort((a, b) => new Date(b.check_in_date) - new Date(a.check_in_date));

          // Calculate pagination
          const indexOfLastBooking = currentPage * rowsPerPage;
          const indexOfFirstBooking = indexOfLastBooking - rowsPerPage;
          const currentBookings = filteredBookings.slice(indexOfFirstBooking, indexOfLastBooking);
          const totalPages = Math.ceil(filteredBookings.length / rowsPerPage);

          return filteredBookings.length === 0 ? (
            <div className="text-center text-gray-500">
              {searchQuery.trim() || statusFilter !== 'all' 
                ? 'No bookings match your search criteria.'
                : 'No bookings found for this property.'}
            </div>
          ) : (
            <div className="space-y-4">
              {/* Mobile view - cards */}
              <div className="md:hidden space-y-4">
                {currentBookings.map((booking) => (
                  <div 
                    key={booking.id}
                    onClick={() => handleViewClick(booking)}
                    className="bg-white p-4 rounded-lg shadow cursor-pointer hover:shadow-md transition-shadow"
                  >
                    <div className="flex justify-between items-start mb-3">
                      <h3 className="font-medium">{booking.first_name} {booking.last_name}</h3>
                      <span className={`px-2 py-1 rounded-full text-sm ${getStatusBadgeClass(booking.status)}`}>
                        {booking.status}
                      </span>
                    </div>
                    <div className="space-y-2 text-sm text-gray-600">
                      <p><span className="font-medium">Check In:</span> {format(new Date(booking.check_in_date), 'MMM dd, yyyy')}</p>
                      <p><span className="font-medium">Check Out:</span> {format(new Date(booking.check_out_date), 'MMM dd, yyyy')}</p>
                      <p className="text-right font-medium text-gray-900">${booking.total_price}</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Desktop view - table */}
              <div className="hidden md:block overflow-x-auto">
                <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="py-4 px-4 text-left text-sm font-medium text-gray-400 uppercase">
                      Guest
                    </th>
                    <th className="py-4 px-4 text-left text-sm font-medium text-gray-400 uppercase">
                      Room
                    </th>
                    <th className="py-4 px-4 text-left text-sm font-medium text-gray-400 uppercase">
                      Check In
                    </th>
                    <th className="py-4 px-4 text-left text-sm font-medium text-gray-400 uppercase">
                      Check Out
                    </th>
                    <th className="py-4 px-4 text-left text-sm font-medium text-gray-400 uppercase">
                      Status
                    </th>
                    <th className="py-4 px-4 text-right text-sm font-medium text-gray-400 uppercase">
                      Amount
                    </th>
                    <th className="py-4 px-4 text-right text-sm font-medium text-gray-400 uppercase">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {currentBookings.map((booking) => (
                    <tr 
                      key={booking.id} 
                      className="border-b last:border-b-0 hover:bg-gray-50 cursor-pointer" 
                      onClick={() => handleViewClick(booking)}
                    >
                      <td className="py-4 px-4">
                        {booking.first_name} {booking.last_name}
                      </td>
                      <td className="py-4 px-4">
                        {booking.room_name}
                      </td>
                      <td className="py-4 px-4">
                        {format(new Date(booking.check_in_date), 'MMM dd, yyyy')}
                      </td>
                      <td className="py-4 px-4">
                        {format(new Date(booking.check_out_date), 'MMM dd, yyyy')}
                      </td>
                      <td className="py-4 px-4">
                        <span className={`px-2 py-1 rounded-full text-sm ${getStatusBadgeClass(booking.status)}`}>
                          {booking.status}
                        </span>
                      </td>
                      <td className="py-4 px-4 text-right">
                        ${booking.total_price}
                      </td>
                      <td className="py-4 px-4 text-right" onClick={(e) => e.stopPropagation()}>
                        <button
                          onClick={() => handleEditClick(booking)}
                          className="text-primary-600 hover:text-primary-800 mr-4"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDeleteClick(booking)}
                          className="text-red-600 hover:text-red-800"
                        >
                          Cancel
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
              </div>

              {/* Pagination controls */}
              <div className="mt-4 flex justify-between items-center">
                <div className="text-sm text-gray-600">
                  Showing {indexOfFirstBooking + 1} to {Math.min(indexOfLastBooking, filteredBookings.length)} of {filteredBookings.length} bookings
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                    disabled={currentPage === 1}
                    className="px-3 py-1 rounded border disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
                  >
                    Previous
                  </button>
                  <button
                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                    disabled={currentPage === totalPages}
                    className="px-3 py-1 rounded border disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
                  >
                    Next
                  </button>
                </div>
              </div>
            </div>
          );
        })()}

        {/* Modals */}
        {selectedBooking && (
          <EditBookingModal
            booking={selectedBooking}
            onClose={handleCloseModal}
            onBookingUpdated={handleBookingUpdated}
          />
        )}
        {viewingBooking && (
          <ViewBookingModal
            booking={viewingBooking}
            onClose={handleCloseModal}
          />
        )}
      </div>
    </div>
  );
};

export default PropertyBookings;
